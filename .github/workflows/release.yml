name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@v1

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        if [ -f "CHANGELOG.md" ]; then
          # Extract changelog for this version from CHANGELOG.md
          awk '/^## \[?v?${{ steps.get_version.outputs.VERSION }}\]?/{flag=1; next} /^## \[?v?[0-9]/{flag=0} flag' CHANGELOG.md > release_changelog.md
          if [ -s release_changelog.md ]; then
            echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_OUTPUT
            cat release_changelog.md >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_OUTPUT
            echo "## What's New in v${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "See commit history for details." >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
        else
          echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_OUTPUT
          echo "## What's New in v${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "See commit history for details." >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        name: "UniversalLead v${{ steps.get_version.outputs.VERSION }}"
        body: |
          ${{ steps.changelog.outputs.CHANGELOG_CONTENT }}
          
          ### Installation
          1. Download the JAR file below
          2. Install NeoForge for Minecraft 1.21.1
          3. Place the JAR in your `mods` folder
          4. Launch Minecraft
          
          ### Requirements
          - Minecraft 1.21.1
          - NeoForge 21.0.167+
        files: |
          build/libs/*.jar
        draft: false
        prerelease: false

    - name: Publish to CurseForge
      uses: Kir-Antipov/mc-publish@v3.3
      with:
        curseforge-id: ${{ secrets.CURSEFORGE_PROJECT_ID }}
        curseforge-token: ${{ secrets.CURSEFORGE_API_TOKEN }}
        
        files: build/libs/!(*-@(dev|sources|javadoc)).jar
        name: UniversalLead v${{ steps.get_version.outputs.VERSION }}
        version: ${{ steps.get_version.outputs.VERSION }}
        version-type: release
        changelog: ${{ steps.changelog.outputs.CHANGELOG_CONTENT }}
        
        loaders: neoforge
        game-versions: |
          1.21
          1.21.1
        dependencies: |
          neoforge | depends | >=21.0.167
        java: |
          21

    - name: Publish to Modrinth
      uses: Kir-Antipov/mc-publish@v3.3
      with:
        modrinth-id: ${{ secrets.MODRINTH_PROJECT_ID }}
        modrinth-token: ${{ secrets.MODRINTH_API_TOKEN }}
        
        files: build/libs/!(*-@(dev|sources|javadoc)).jar
        name: UniversalLead v${{ steps.get_version.outputs.VERSION }}
        version: ${{ steps.get_version.outputs.VERSION }}
        version-type: release
        changelog: ${{ steps.changelog.outputs.CHANGELOG_CONTENT }}
        
        loaders: neoforge
        game-versions: |
          1.21
          1.21.1
        dependencies: |
          neoforge | required | >=21.0.167
        java: |
          21